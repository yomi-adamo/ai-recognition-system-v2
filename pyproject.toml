[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "facial-vision"
version = "1.0.0"
description = "A backend system for detecting, cropping, and clustering faces from images and videos with blockchain provenance tracking"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Facial Vision Team", email = "team@facial-vision.com"}
]
keywords = ["face detection", "face recognition", "clustering", "video processing", "blockchain", "provenance"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "face_recognition==1.3.0",
    "opencv-python==4.11.0.86",
    "mtcnn==0.1.1",
    "deepface==0.0.79",
    "Pillow==10.1.0",
    "imageio==2.31.1",
    "imageio-ffmpeg==0.4.8",
    "numpy==1.24.3",
    "scikit-learn==1.3.0",
    "hdbscan==0.8.33",
    "scipy==1.11.3",
    "pandas==2.0.3",
    "pyyaml==6.0.1",
    "python-dotenv==1.0.0",
    "python-dateutil==2.8.2",
    "exifread==3.0.0",
    "pytz==2023.3",
    "ipfshttpclient==0.7.0",
    "requests==2.31.0",
    "aiohttp==3.8.5",
    "httpx==0.24.1",
    "loguru==0.7.0",
    "structlog==23.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest==7.4.2",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "pytest-mock==3.11.1",
    "black==23.7.0",
    "flake8==6.1.0",
    "mypy==1.5.1",
    "isort==5.12.0",
    "pre-commit==3.3.3",
]

[project.urls]
Homepage = "https://github.com/facial-vision/facial-vision"
Documentation = "https://facial-vision.readthedocs.io"
Repository = "https://github.com/facial-vision/facial-vision"
Issues = "https://github.com/facial-vision/facial-vision/issues"

[project.scripts]
facial-vision = "src.cli:main"
process-image = "scripts.process_image:main"
process-video = "scripts.process_video:main"
process-folder = "scripts.process_folder:main"

[tool.setuptools]
packages = ["src"]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
pythonpath = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
branch = true
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/scripts/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "dist",
    "build",
    "*.egg",
    "venv",
]
per-file-ignores = [
    "__init__.py:F401",
]